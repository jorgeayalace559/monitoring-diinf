---
- name: Instalar LXC y bridge-utils
  apt:
    name:
      - lxc
      - bridge-utils
    state: present
    update_cache: yes

- name: Crear contenedores LXC si no existen
  command: >
    lxc-create -n {{ item.key }} -t download -- --dist ubuntu --release jammy --arch amd64
  args:
    creates: "/var/lib/lxc/{{ item.key }}"
  loop: "{{ container_network | dict2items }}"

- name: Configurar red estática para cada contenedor
  blockinfile:
    path: "/var/lib/lxc/{{ item.key }}/config"
    block: |
      lxc.net.0.type = veth
      lxc.net.0.link = {{ bridge }}
      lxc.net.0.flags = up
      lxc.net.0.hwaddr = 00:16:3e:xx:xx:{{ '%02x' % (ansible_loop.index + 10) }}
      lxc.net.0.ipv4.address = {{ item.value.ip }}/24
      lxc.net.0.ipv4.gateway = {{ gateway }}
  loop: "{{ container_network | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
    extended: yes


- name: Iniciar los contenedores
  command: lxc-start -n {{ item.key }} -d
  loop: "{{ container_network | dict2items }}"

- name: Esperar 5 segundos para permitir que los contenedores arranquen
  pause:
    seconds: 5

- name: Configurar IP estática dentro del contenedor
  shell: |
    lxc-attach -n {{ item.key }} -- bash -c "
      echo 'network:
        version: 2
        ethernets:
          eth0:
            dhcp4: no
            addresses: [{{ item.value.ip }}/24]
            gateway4: {{ gateway }}
            nameservers:
              addresses: [8.8.8.8]' > /etc/netplan/01-netcfg.yaml
      netplan apply"
  loop: "{{ container_network | dict2items }}"

- name: Instalar openssh-server en los contenedores
  shell: |
    lxc-attach -n {{ item.key }} -- bash -c "apt update && apt install -y openssh-server"
  loop: "{{ container_network | dict2items }}"

- name: Establecer contraseña para el usuario ubuntu
  shell: |
    lxc-attach -n {{ item.key }} -- bash -c "echo 'ubuntu:{{ ubuntu_password }}' | chpasswd"
  loop: "{{ container_network | dict2items }}"

- name: Validar si existe la clave SSH pública
  stat:
    path: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
  register: ssh_key

- name: Generar clave SSH si no existe
  command: ssh-keygen -t rsa -b 4096 -f "{{ lookup('env', 'HOME') }}/.ssh/id_rsa" -N ""
  when: not ssh_key.stat.exists

- name: Eliminar clave anterior del usuario normal
  shell: ssh-keygen -f "{{ lookup('env', 'HOME') }}/.ssh/known_hosts" -R {{ item.value.ip }}
  delegate_to: localhost
  ignore_errors: true
  loop: "{{ container_network | dict2items }}"

- name: Leer la clave pública local
  slurp:
    src: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
  register: ssh_pubkey
  delegate_to: localhost
  become: false

- name: Crear directorio .ssh en contenedor si no existe
  shell: |
    lxc-attach -n {{ item.key }} -- bash -c "mkdir -p /home/ubuntu/.ssh && chown ubuntu:ubuntu /home/ubuntu/.ssh && chmod 700 /home/ubuntu/.ssh"
  loop: "{{ container_network | dict2items }}"

- name: Copiar clave pública al contenedor (authorized_keys)
  shell: |
    echo '{{ ssh_pubkey.content | b64decode }}' | lxc-attach -n {{ item.key }} -- bash -c "cat >> /home/ubuntu/.ssh/authorized_keys && chown ubuntu:ubuntu /home/ubuntu/.ssh/authorized_keys && chmod 600 /home/ubuntu/.ssh/authorized_keys"
  loop: "{{ container_network | dict2items }}"


- name: Preparar lista de IPs para inventario
  set_fact:
    container_map: "{{ container_network }}"

- name: Crear directorio del inventario si no existe
  file:
    path: "{{ playbook_dir }}/../inventories/dev"
    state: directory
    mode: '0755'

- name: Generar archivo de inventario Ansible
  template:
    src: inventory.j2
    dest: "{{ playbook_dir }}/../inventories/dev/hosts"
    mode: '0644'


- name: Mostrar ubicación del inventario generado
  debug:
    msg: "Inventario disponible en inventories/dev/hosts"
